// https://stackoverflow.com/questions/41292559/could-not-find-a-declaration-file-for-module-module-name-path-to-module-nam
//import * as SPI from "spi-device"; // TODO: figure out how to make a dt.s file and use this instead
//import * as Gpio from "onoff"; // TODO: figure out how to make a dt.s file and use this instead
const SPI = require('spi-device');
const Gpio = require('onoff').Gpio;

export default class Display {

    ASCII_CHARS = [
        0x00, 0x00, 0x00, 0x00, 0x00 // 20  
        ,0x00, 0x00, 0x5f, 0x00, 0x00 // 21 !
        ,0x00, 0x07, 0x00, 0x07, 0x00 // 22 "
        ,0x14, 0x7f, 0x14, 0x7f, 0x14 // 23 #
        ,0x24, 0x2a, 0x7f, 0x2a, 0x12 // 24 $
        ,0x23, 0x13, 0x08, 0x64, 0x62 // 25 %
        ,0x36, 0x49, 0x55, 0x22, 0x50 // 26 &
        ,0x00, 0x05, 0x03, 0x00, 0x00 // 27 '
        ,0x00, 0x1c, 0x22, 0x41, 0x00 // 28 (
        ,0x00, 0x41, 0x22, 0x1c, 0x00 // 29 )
        ,0x14, 0x08, 0x3e, 0x08, 0x14 // 2a *
        ,0x08, 0x08, 0x3e, 0x08, 0x08 // 2b +
        ,0x00, 0x50, 0x30, 0x00, 0x00 // 2c ,
        ,0x08, 0x08, 0x08, 0x08, 0x08 // 2d -
        ,0x00, 0x60, 0x60, 0x00, 0x00 // 2e .
        ,0x20, 0x10, 0x08, 0x04, 0x02 // 2f /
        ,0x3e, 0x51, 0x49, 0x45, 0x3e // 30 0
        ,0x00, 0x42, 0x7f, 0x40, 0x00 // 31 1
        ,0x42, 0x61, 0x51, 0x49, 0x46 // 32 2
        ,0x21, 0x41, 0x45, 0x4b, 0x31 // 33 3
        ,0x18, 0x14, 0x12, 0x7f, 0x10 // 34 4
        ,0x27, 0x45, 0x45, 0x45, 0x39 // 35 5
        ,0x3c, 0x4a, 0x49, 0x49, 0x30 // 36 6
        ,0x01, 0x71, 0x09, 0x05, 0x03 // 37 7
        ,0x36, 0x49, 0x49, 0x49, 0x36 // 38 8
        ,0x06, 0x49, 0x49, 0x29, 0x1e // 39 9
        ,0x00, 0x36, 0x36, 0x00, 0x00 // 3a :
        ,0x00, 0x56, 0x36, 0x00, 0x00 // 3b ;
        ,0x08, 0x14, 0x22, 0x41, 0x00 // 3c <
        ,0x14, 0x14, 0x14, 0x14, 0x14 // 3d =
        ,0x00, 0x41, 0x22, 0x14, 0x08 // 3e >
        ,0x02, 0x01, 0x51, 0x09, 0x06 // 3f ?
        ,0x32, 0x49, 0x79, 0x41, 0x3e // 40 @
        ,0x7e, 0x11, 0x11, 0x11, 0x7e // 41 A
        ,0x7f, 0x49, 0x49, 0x49, 0x36 // 42 B
        ,0x3e, 0x41, 0x41, 0x41, 0x22 // 43 C
        ,0x7f, 0x41, 0x41, 0x22, 0x1c // 44 D
        ,0x7f, 0x49, 0x49, 0x49, 0x41 // 45 E
        ,0x7f, 0x09, 0x09, 0x09, 0x01 // 46 F
        ,0x3e, 0x41, 0x49, 0x49, 0x7a // 47 G
        ,0x7f, 0x08, 0x08, 0x08, 0x7f // 48 H
        ,0x00, 0x41, 0x7f, 0x41, 0x00 // 49 I
        ,0x20, 0x40, 0x41, 0x3f, 0x01 // 4a J
        ,0x7f, 0x08, 0x14, 0x22, 0x41 // 4b K
        ,0x7f, 0x40, 0x40, 0x40, 0x40 // 4c L
        ,0x7f, 0x02, 0x0c, 0x02, 0x7f // 4d M
        ,0x7f, 0x04, 0x08, 0x10, 0x7f // 4e N
        ,0x3e, 0x41, 0x41, 0x41, 0x3e // 4f O
        ,0x7f, 0x09, 0x09, 0x09, 0x06 // 50 P
        ,0x3e, 0x41, 0x51, 0x21, 0x5e // 51 Q
        ,0x7f, 0x09, 0x19, 0x29, 0x46 // 52 R
        ,0x46, 0x49, 0x49, 0x49, 0x31 // 53 S
        ,0x01, 0x01, 0x7f, 0x01, 0x01 // 54 T
        ,0x3f, 0x40, 0x40, 0x40, 0x3f // 55 U
        ,0x1f, 0x20, 0x40, 0x20, 0x1f // 56 V
        ,0x3f, 0x40, 0x38, 0x40, 0x3f // 57 W
        ,0x63, 0x14, 0x08, 0x14, 0x63 // 58 X
        ,0x07, 0x08, 0x70, 0x08, 0x07 // 59 Y
        ,0x61, 0x51, 0x49, 0x45, 0x43 // 5a Z
        ,0x00, 0x7f, 0x41, 0x41, 0x00 // 5b [
        ,0x02, 0x04, 0x08, 0x10, 0x20 // 5c \
        ,0x00, 0x41, 0x41, 0x7f, 0x00 // 5d ]
        ,0x04, 0x02, 0x01, 0x02, 0x04 // 5e ^
        ,0x40, 0x40, 0x40, 0x40, 0x40 // 5f _
        ,0x00, 0x01, 0x02, 0x04, 0x00 // 60 `
        ,0x20, 0x54, 0x54, 0x54, 0x78 // 61 a
        ,0x7f, 0x48, 0x44, 0x44, 0x38 // 62 b
        ,0x38, 0x44, 0x44, 0x44, 0x20 // 63 c
        ,0x38, 0x44, 0x44, 0x48, 0x7f // 64 d
        ,0x38, 0x54, 0x54, 0x54, 0x18 // 65 e
        ,0x08, 0x7e, 0x09, 0x01, 0x02 // 66 f
        ,0x0c, 0x52, 0x52, 0x52, 0x3e // 67 g
        ,0x7f, 0x08, 0x04, 0x04, 0x78 // 68 h
        ,0x00, 0x44, 0x7d, 0x40, 0x00 // 69 i
        ,0x20, 0x40, 0x44, 0x3d, 0x00 // 6a j 
        ,0x7f, 0x10, 0x28, 0x44, 0x00 // 6b k
        ,0x00, 0x41, 0x7f, 0x40, 0x00 // 6c l
        ,0x7c, 0x04, 0x18, 0x04, 0x78 // 6d m
        ,0x7c, 0x08, 0x04, 0x04, 0x78 // 6e n
        ,0x38, 0x44, 0x44, 0x44, 0x38 // 6f o
        ,0x7c, 0x14, 0x14, 0x14, 0x08 // 70 p
        ,0x08, 0x14, 0x14, 0x18, 0x7c // 71 q
        ,0x7c, 0x08, 0x04, 0x04, 0x08 // 72 r
        ,0x48, 0x54, 0x54, 0x54, 0x20 // 73 s
        ,0x04, 0x3f, 0x44, 0x40, 0x20 // 74 t
        ,0x3c, 0x40, 0x40, 0x20, 0x7c // 75 u
        ,0x1c, 0x20, 0x40, 0x20, 0x1c // 76 v
        ,0x3c, 0x40, 0x30, 0x40, 0x3c // 77 w
        ,0x44, 0x28, 0x10, 0x28, 0x44 // 78 x
        ,0x0c, 0x50, 0x50, 0x50, 0x3c // 79 y
        ,0x44, 0x64, 0x54, 0x4c, 0x44 // 7a z
        ,0x00, 0x08, 0x36, 0x41, 0x00 // 7b {
        ,0x00, 0x00, 0x7f, 0x00, 0x00 // 7c |
        ,0x00, 0x41, 0x36, 0x08, 0x00 // 7d }
        ,0x10, 0x08, 0x08, 0x10, 0x08 // 7e ~
        ,0xff, 0xff, 0xff, 0xff, 0xff // 7f (filled block)
    ]; 

    LCDWIDTH: number =                      84;
    LCDHEIGHT: number =                     48;
    ROWPIXELS: number =                     this.LCDHEIGHT;
    N5110_POWERDOWN: number =             0x04;
    N5110_ENTRYMODE: number =             0x02;
    N5110_EXTENDEDINSTRUCTION: number =   0x01;
    N5110_DISPLAYBLANK: number =          0x0;
    N5110_DISPLAYNORMAL: number =         0x4;
    N5110_DISPLAYALLON: number =          0x1;
    N5110_DISPLAYINVERTED: number =       0x5;
    N5110_FUNCTIONSET: number =           0x20;
    N5110_DISPLAYCONTROL: number =        0x08;
    N5110_SETYADDR: number =              0x40;
    N5110_SETXADDR: number =              0x80;
    N5110_SETTEMP: number =               0x04;
    N5110_SETBIAS: number =               0x10;
    N5110_SETVOP: number =                0x80;
    N5110_COMMAND =                       0;
    N5110_DATA =                          1;

    sclkPin:number = 14; // sclk
    dinPin:number = 12; // mosi
    dcPin:number = 17;
    csPin:number = 10;
    rstPin:number = 27;
    // ce - ce0

    public buffer: Array<number>;
    spi: any;
    gpio: any;
    dc: any;
    rst: any;
    cs: any;
    din: any;
    sclk: any;

    public async init(): Promise<void> {

        console.log("Display:: Initializing SPI");
        this.spi = SPI.openSync(0, 0);
        console.log("Display:: Setting up GPIO pins");
        this.dc = new Gpio(this.dcPin, "out");
        this.rst = new Gpio(this.rstPin, "out");
        //this.cs = new Gpio(this.csPin, "out");
        //this.din = new Gpio(this.dinPin, "out");
        //this.sclk = new Gpio(this.sclkPin, "out");

        console.log("Display:: Finishing");
        this.reset();
        this.setBias(4);
        this.setContrast(60);
        this.clear();

        console.log("Display:: Init Complete!");
    }

    public async reset(): Promise<void> {

        // Reset the display
        // Toggle RST low to reset.
        this.rst.writeSync(0);
        this.rst.writeSync(1);
    }

    public async display(): Promise<void> {

        // Write display buffer to physical display.
        // TODO: Consider support for partial updates like Arduino library.
        // Reset to position zero.
        this.sendCommand([this.N5110_SETYADDR]);
        this.sendCommand([this.N5110_SETXADDR]);
        
        // Write the buffer.
        this.dc.writeSync(1);
        await this.sendSPIData(this.buffer);
    }

    public async clear(): Promise<void> {

        // clear contents of image buffer.
        this.buffer = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFF, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0xC0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x87, 0x8F, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xC1, 0xC0, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF1, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x0F, 0x87, 0xE7, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x3F, 0xF9, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7E, 0x3F, 0x3F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];
        
        // clear actual screen
        let amt = (this.LCDWIDTH * this.LCDHEIGHT ) / 8;
        this.setCursor(0, 0);

        for (let index = 0 ; index < amt ; index ++)
           this.sendData([0x00]);

        this.setCursor(0, 0);
    }

    public async invert(invert: boolean): Promise<void> {
            
        if (invert)
            this.sendCommand([0x0D]);  //set inverse mode
        else
            this.sendCommand([0x0C]);  //set normal mode
    };

    public async setCursor(x: number, y: number): Promise<void> {

        this.sendCommand([0x80 | x]);  // Column
        this.sendCommand([0x40 | y]);  // Row
    }

    public async setContrast(contrast: number): Promise<void> {

        // Set contrast to specified value (should be 0-127).
        if (contrast < 0)
            contrast = 0;

        if (contrast > 127)
            contrast = 127;

        await this.extendedCommand([this.N5110_SETVOP | contrast]);
    }

    public async setBias(bias: number): Promise<void> {

        await this.extendedCommand([this.N5110_SETBIAS | bias]);
    }

    public async extendedCommand(data: Array<number>): Promise<void> {

        // Send a command in extended mode
        // Set extended command mode
        await this.sendCommand([this.N5110_FUNCTIONSET | this.N5110_EXTENDEDINSTRUCTION]);
        await this.sendCommand(data);

        // Set normal display mode.
        await this.sendCommand([this.N5110_FUNCTIONSET]);
        await this.sendCommand([this.N5110_DISPLAYCONTROL | this.N5110_DISPLAYNORMAL]);
    }

    private async sendCharacter(character: string): Promise<void> {

        let char:number = character.charCodeAt(0);

        if (char != 0x7f) 
            this.sendData([0x00]); // Blank vertical line padding
        else 
            this.sendData([0xff]); // make total black pixel

        let data: Array<number> = [];
        for (let index: number = 0; index < 5; index ++)
            data.push(this.ASCII_CHARS[((char - 0x20) * 5) + index]);

        this.sendData(data);

        if (char != 0x7f) 
            this.sendData([0x00]); // Blank vertical line padding
        else 
            this.sendData([0xff]); // make total black pixel
    }

    public async sendString(characters: string): Promise<void> { 

        var index;
        for (let index = 0; index < characters.length; index ++)
            this.sendCharacter(characters[index]);
    }

    public async sendBitmap(array: Array<number>): Promise<void> {
            
        var amt = (this.LCDWIDTH * this.LCDHEIGHT ) / 8;
        if (array.length < amt) 
            amt = array.length;

        for (let index = 0; index < amt; index ++)
        this.sendData([array[index]]);
    };

    public async sendCommand(data: Array<number>): Promise<void> {

        // Send command byte to display.
        // DC pin low signals command byte.
        this.dc.writeSync(this.N5110_COMMAND);
        await this.sendSPIData(data);
    }

    public async sendData(data: Array<number>): Promise<void> {

        // Send byte of data to display.
        // DC pin high signals data byte.
        this.dc.writeSync(this.N5110_DATA);
        await this.sendSPIData(data);
    }

    private async sendSPIData(data: Array<number>): Promise<any> {

        // An SPI message is an array of one or more read+write transfers
        const message = [{
            sendBuffer: Buffer.from(data),
            byteLength: data.length,
            speedHz: 4000000
        }];

        this.spi.transfer(message, function (err: any, message: any) {

            if (err) throw err;
            return message[0].receiveBuffer;
        });
    }
};