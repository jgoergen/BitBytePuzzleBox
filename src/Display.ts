// https://stackoverflow.com/questions/41292559/could-not-find-a-declaration-file-for-module-module-name-path-to-module-nam
//import * as SPI from "spi-device"; // TODO: figure out how to make a dt.s file and use this instead
//import * as Gpio from "onoff"; // TODO: figure out how to make a dt.s file and use this instead
const SPI = require('spi-device');
const Gpio = require('onoff').Gpio;

//TODO: get routines from here https://www.npmjs.com/package/nokia5110

export default class Display {

    LCDWIDTH: number =                      84;
    LCDHEIGHT: number =                     48;
    ROWPIXELS: number =                     this.LCDHEIGHT;
    PCD8544_POWERDOWN: number =             0x04;
    PCD8544_ENTRYMODE: number =             0x02;
    PCD8544_EXTENDEDINSTRUCTION: number =   0x01;
    PCD8544_DISPLAYBLANK: number =          0x0;
    PCD8544_DISPLAYNORMAL: number =         0x4;
    PCD8544_DISPLAYALLON: number =          0x1;
    PCD8544_DISPLAYINVERTED: number =       0x5;
    PCD8544_FUNCTIONSET: number =           0x20;
    PCD8544_DISPLAYCONTROL: number =        0x08;
    PCD8544_SETYADDR: number =              0x40;
    PCD8544_SETXADDR: number =              0x80;
    PCD8544_SETTEMP: number =               0x04;
    PCD8544_SETBIAS: number =               0x10;
    PCD8544_SETVOP: number =                0x80;
    
    sclkPin:number = 14;
    dinPin:number = 12;
    dcPin:number = 23;
    csPin:number = 10;
    rstPin:number = 24;

    public buffer: Array<number>;
    spi: any;
    gpio: any;
    dc: any;
    rst: any;
    cs: any;

    public async init(): Promise<void> {

        console.log("Display:: Initializing SPI");
        this.spi = SPI.openSync(0, 0);

        console.log("Display:: Setting up GPIO pins");
        this.dc = new Gpio(this.dcPin, "out");
        this.rst = new Gpio(this.rstPin, "out");
        console.log(this.rst);
        this.cs = new Gpio(this.csPin, "out");
        
        console.log("Display:: Finishing");
        this.clear();
        this.reset();
        this.setBias(4);
        this.setContrast(40);

        console.log("Display:: Init Complete!");
    }

    public async reset(): Promise<void> {

        // Reset the display
        // Toggle RST low to reset.
        this.rst.writeSync(0);
        this.rst.writeSync(1);
    }

    public async display(): Promise<void> {

        // Write display buffer to physical display.
        // TODO: Consider support for partial updates like Arduino library.
        // Reset to position zero.
        this.sendCommand([this.PCD8544_SETYADDR]);
        this.sendCommand([this.PCD8544_SETXADDR]);
        
        // Write the buffer.
        this.dc.writeSync(1);
        await this.sendSPIData(this.buffer);
    }

    public async clear(): Promise<void> {

        // Clear contents of image buffer.
        this.buffer = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFF, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0xC0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x87, 0x8F, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xC1, 0xC0, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF1, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x0F, 0x87, 0xE7, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x3F, 0xF9, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7E, 0x3F, 0x3F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];
    }

    public async setContrast(contrast: number): Promise<void> {

        // Set contrast to specified value (should be 0-127).
        if (contrast < 0)
            contrast = 0;

        if (contrast > 127)
            contrast = 127;

        await this.extendedCommand([this.PCD8544_SETVOP | contrast]);
    }

    public async setBias(bias: number): Promise<void> {

        await this.extendedCommand([this.PCD8544_SETBIAS | bias]);
    }

    public async extendedCommand(data: Array<number>): Promise<void> {

        // Send a command in extended mode
        // Set extended command mode
        await this.sendCommand([this.PCD8544_FUNCTIONSET | this.PCD8544_EXTENDEDINSTRUCTION]);
        await this.sendCommand(data);

        // Set normal display mode.
        await this.sendCommand([this.PCD8544_FUNCTIONSET]);
        await this.sendCommand([this.PCD8544_DISPLAYCONTROL | this.PCD8544_DISPLAYNORMAL]);
    }

    public async sendCommand(data: Array<number>): Promise<void> {

        // Send command byte to display.
        // DC pin low signals command byte.
        this.dc.writeSync(0);
        await this.sendSPIData(data);
    }

    public async sendData(data: Array<number>): Promise<void> {

        // Send byte of data to display.
        // DC pin high signals data byte.
        this.dc.writeSync(1);
        await this.sendSPIData(data);
    }

    private async sendSPIData(data: Array<number>): Promise<any> {

        // An SPI message is an array of one or more read+write transfers
        const message = [{
            sendBuffer: Buffer.from(data),
            receiveBuffer: Buffer.alloc(data.length),
            byteLength: data.length,
            speedHz: 20000 
        }];

        this.spi.transfer(message, function (err: any, message: any) {

            if (err) throw err;
            //console.log("Send got back", message[0].receiveBuffer, typeof message[0].receiveBuffer);
            //return message[0].receiveBuffer;
        });
    }
};